name: CI

on:
  pull_request:
    branches: [master]

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(release)') }}
    outputs:
      hasChanges: ${{ steps.affected.outputs.hasChanges }}
      matrix: ${{ steps.affected.outputs.matrix }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install dependencies
        uses: robinpellegrims/composite-actions/pnpm-install@main
      - uses: nrwl/nx-set-shas@v3
      # This line is needed for nx affected to work when CI is running on a PR
      - run: git branch --track master origin/master
      - name: Check format
        run: pnpm nx format:check
      - name: Calculate affected projects
        uses: actions/github-script@v7
        id: affected
        with:
          script: |
            // Calculate affected projects and define a matrix to use for the next job
            const maxRunners = 3;
            const targets = ['test', 'lint', 'e2e'];
            const serialTargets = ['e2e'];
            const matrix = { include: [] };
            let hasChanges = false;

            for (const target of targets) {
              const command = `npx nx show projects --affected --json --with-target ${target}`;
              const { stdout: affected } = await exec.getExecOutput(command);
              const sortedProjects = JSON.parse(affected).sort();

              if (sortedProjects.length > 0) {
                hasChanges = true;
              }

              const isSerialTarget = serialTargets.includes(target);
              const projectsCount = sortedProjects.length;
              const projectSliceSize = isSerialTarget
                ? 1
                : projectsCount <= 9
                ? 3
                : Math.max(Math.ceil(projectsCount / maxRunners), 3);
              const machineCount = isSerialTarget ? projectsCount : Math.max(Math.ceil(projectsCount / projectSliceSize), 1);
              const machineMatrix = Array.from(Array(machineCount).keys()).map((_, i) => `${i + 1}`);

              for (const machine of machineMatrix) {
                const machineIndex = Number(machine);
                const projects =
                  machineIndex < machineCount
                    ? sortedProjects.slice(projectSliceSize * (machineIndex - 1), projectSliceSize * machineIndex)
                    : sortedProjects.slice(projectSliceSize * (machineIndex - 1));

                if (projects.length > 0) {
                  matrix.include.push({
                    distribution: machineIndex,
                    parallel: isSerialTarget ? 1 : 3,
                    projects: projects.join(','),
                    target,
                  });
                }
              }
            }

            core.info(`hasChanges: ${hasChanges}`);
            core.info(`matrix: ${JSON.stringify(matrix)}`);

            core.setOutput(`hasChanges`, hasChanges);
            core.setOutput(`matrix`, matrix);

  execute:
    name: ${{ matrix.target }} (${{ matrix.distribution }})
    if: ${{ needs.prepare.outputs.hasChanges == 'true' }}
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.target == 'test' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Install dependencies
        uses: robinpellegrims/composite-actions/pnpm-install@main
      - name: Execute
        uses: actions/github-script@v7
        id: execute
        with:
          script: |
            // Execute the target on the affected projects
            const target = process.env.MATRIX_TARGET;
            const projects = process.env.MATRIX_PROJECTS;
            const parallel = process.env.MATRIX_PARALLEL;
            const command = `npx nx run-many --target=${target} --projects=${projects} --parallel=${parallel}`;

            if (projects.length) {
              exec.exec(`${command} --runner=remotecache-s3 --verbose`);
            }
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MATRIX_TARGET: ${{ matrix.target }}
          MATRIX_PARALLEL: ${{ matrix.parallel }}
          MATRIX_PROJECTS: ${{ matrix.projects }}
